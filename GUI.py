# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'guiFinalVersion.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import date, timedelta
import generate_report
import Queries
import User

class Ui_UniversityLibraryManagement(object):
    def submitAddNewBook_clicked(self):
        ISBN = self.ISBNTitleTextBox.text()
        title = self.bookTitleTextBox.text()
        publisher = self.bookPublisherNameTextBox.text()
        author = self.bookAuthorTextBox.text()
        publication_year = self.bookPublicationYearTextBox.text()
        category = self.bookCategoryTextBox.text()

        if(ISBN == "" or title == "" or publisher == "" or author == "" or publication_year == "" or category == ""):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "Please fill all the fields!"
            )
        elif(not Queries.isuniqueISBN(int(ISBN))):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "ISBN already exists!"
            )
        # if author and category exist
        elif(Queries.checkIfAuthorExists(author) and Queries.checkIfCategoryExists(category)):
            Queries.insertIntoBook(ISBN, title, publisher, publication_year, Queries.getCategoryID(category))
            Queries.insertIntoWrite(ISBN, Queries.getAuthorID(author))
            Queries.insertIntoCopy(ISBN)
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Success",
                "Book successfully added!"
            )
            self.clearAddBookFields()
            self.updatingTables()
        # if author does not exist
        elif(not Queries.checkIfAuthorExists(author) and Queries.checkIfCategoryExists(category)):
            Queries.creatNewAuthor(author)
            Queries.insertIntoBook(ISBN, title, publisher, publication_year, Queries.getCategoryID(category))
            Queries.insertIntoWrite(ISBN, Queries.getAuthorID(author))
            Queries.insertIntoCopy(ISBN)
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Success",
                "Book successfully added!"
            )
            self.clearAddBookFields()
            self.updatingTables()
        # if category does not exist
        elif(not Queries.checkIfCategoryExists(category) and Queries.checkIfAuthorExists(author)):
            Queries.creatNewCategory(category)
            Queries.insertIntoBook(ISBN, title, publisher, publication_year, Queries.getCategoryID(category))
            Queries.insertIntoWrite(ISBN, Queries.getAuthorID(author))
            Queries.insertIntoCopy(ISBN)
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Success",
                "Book successfully added!"
            )
            self.clearAddBookFields()
            self.updatingTables()
        # if category and autthor don't exist
        else:
            Queries.creatNewAuthor(author)
            Queries.creatNewCategory(category)
            Queries.insertIntoBook(ISBN, title, publisher, publication_year, Queries.getCategoryID(category))
            Queries.insertIntoWrite(ISBN, Queries.getAuthorID(author))
            Queries.insertIntoCopy(ISBN)
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Success",
                "Book successfully added!"
            )
            self.clearAddBookFields()
            self.updatingTables()
   
    def clearAddBookFields(self):
        self.ISBNTitleTextBox.setText("")
        self.bookTitleTextBox.setText("")
        self.bookPublisherNameTextBox.setText("")
        self.bookAuthorTextBox.setText("")
        self.bookPublicationYearTextBox.setText("")
        self.bookCategoryTextBox.setText("")

    def changeAdminBG(self):
        UniversityLibraryManagement.setStyleSheet("QMainWindow{\n"
"background-image: url(\"assets/admin_bg.png\");\n"
"background-position: top left;\n"
"background-repeat: no-repeat;\n"
"background-size: cover;\n"
"}")

    def changeStudentBG(self):
        UniversityLibraryManagement.setStyleSheet("QMainWindow{\n"
"background-image: url(\"assets/student_bg.png\");\n"
"background-position: top left;\n"
"background-repeat: no-repeat;\n"
"background-size: cover;\n"
"}")

    def changeLoginBG(self):
        UniversityLibraryManagement.setStyleSheet("QMainWindow{\n"
"background-image: url(\"assets/login_bg.png\");\n"
"background-position: top left;\n"
"background-repeat: no-repeat;\n"
"background-size: cover;\n"
"}")

    def changeBG(self):
        UniversityLibraryManagement.setStyleSheet("QMainWindow{\n"
"background-image: url(\"assets/bg_2.png\");\n"
"background-position: top left;\n"
"background-repeat: no-repeat;\n"
"background-size: cover;\n"
"}")

    def submitRegisterNewUser_clicked(self):
        firstName = self.firstNameRegisterTextBox.text()
        lastName = self.lastNameRegisterTextBox.text()
        password = self.passwordRegisterTextBox.text()
        email = self.emailRegisterTextBox.text()
       
        if (self.adminRoleButtom.isChecked()):
            role = "admin"
        else:
            role = "student" 

        if(firstName == "" or lastName == ""  or password == "" or email == ""):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "Please fill all the fields!"
            )
        elif(not Queries.isUniqueEmail(email)):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "This email already Used!"
            )
        else:
            Queries.insertIntoUser(firstName, lastName, Queries.getUniqueUserID(), email, role, password)
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Success",
                "User successfully registered!"
            )
            self.loginPageWidget.show()
        
    def submitLogin_clicked(self):
        email = self.emailLoginTextBox.text()
        password = self.passwordLoninTextBox.text()

        if(email == "" or password == ""):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "Please fill all the fields!"
            )
            return
        else:
            if(Queries.checkIfUserExists(email)):
                if(Queries.checkIfPasswordCorrect(email, password)):
                    QtWidgets.QMessageBox.information(
                        self.addNewBookWidget,
                        "Success",
                        "Login successfully!"
                    )
                    self.loginPageWidget.hide()
                    self.browsingBooksWidget.show()
                    User.logged_in_user = Queries.getUserDetailsByEmail(email)
                    if (User.logged_in_user.role == "admin"):
                        self.showAdminNavBar()
                        self.changeAdminBG()
                        generate_report.generate_pdf_report()
                    elif (User.logged_in_user.role == "student"):
                        self.showStudentNavBar()
                        self.changeStudentBG()
                else:
                    QtWidgets.QMessageBox.information(
                        self.addNewBookWidget,
                        "Error",
                        "Incorrect password!"
                    )
            else:
                QtWidgets.QMessageBox.information(
                        self.addNewBookWidget,
                        "Error",
                        "This email does not exist!"
                    )       
                 
    def showStudentNavBar(self):
        self.browsingBookHeader.show()
        self.updateInfoHeader.show()
        self.borrowBookHeader.show()
    
    def showAdminNavBar(self):
        self.addBookHeader.show()
        self.updateDeleteBookHeader.show()
        self.browsingBookHeader.show()
        self.updateInfoHeader.show()
        self.borrowBookHeader.show()
        self.borrowBookHeader.setEnabled(False)

    def UpdateUserInfo_clicked(self):
        email = self.emailTextBox.text()
        firstName = self.firstNameTextBox.text()
        lastName = self.lastNameTextBox.text()
        password = self.passwordTextBox.text()

        if(email == "" or firstName == "" or lastName == "" or password == ""):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "Please fill all the fields!"
            )
        else:
            Queries.updateUser(firstName, lastName, User.logged_in_user.userID, email, password)
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Success",
                "User information successfully updated!"
            )

    def updatingTables(self):
        self.clearBrowsingBookTable()
        self.clearUpdateDeleteBookTable()

        bookListBrowsing = Queries.selectAllFromBook()
        categoriesListBrowsing = Queries.selectAllBooksCategories()
        authersListBrowsing = Queries.selectAllBookAuthors()
        
        rowNumBrowsing = 0
        for row in bookListBrowsing:
            self.browsingBooksTable.setRowCount(rowNumBrowsing + 1)
            self.browsingBooksTable.setItem(rowNumBrowsing, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 1, QtWidgets.QTableWidgetItem(str(row[1])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 2, QtWidgets.QTableWidgetItem(str(authersListBrowsing[rowNumBrowsing][0])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 3, QtWidgets.QTableWidgetItem(str(row[2])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 4, QtWidgets.QTableWidgetItem(str(row[3])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 5, QtWidgets.QTableWidgetItem(str(categoriesListBrowsing[rowNumBrowsing][0])))
            rowNumBrowsing += 1

        bookListUpdateDelete = Queries.selectAllFromBook()
        categoriesListUpdateDelete = Queries.selectAllBooksCategories()
        authersListUpdateDelete = Queries.selectAllBookAuthors()
        
        rowNumUpdateDelete = 0
        for row in bookListUpdateDelete:
            self.updateDeleteBookTable.setRowCount(rowNumUpdateDelete + 1)
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 1, QtWidgets.QTableWidgetItem(str(row[1])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 2, QtWidgets.QTableWidgetItem(str(authersListUpdateDelete[rowNumUpdateDelete][0])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 3, QtWidgets.QTableWidgetItem(str(row[2])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 4, QtWidgets.QTableWidgetItem(str(row[3])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 5, QtWidgets.QTableWidgetItem(str(categoriesListUpdateDelete[rowNumUpdateDelete][0])))
            rowNumUpdateDelete += 1    

    def clearBrowsingBookTable(self):
        self.browsingBooksTable.clearContents()
        self.browsingBooksTable.setRowCount(0)

    def clearUpdateDeleteBookTable(self):
        self.updateDeleteBookTable.clearContents()
        self.updateDeleteBookTable.setRowCount(0)

    def SubmitSearchBook_clicked(self):
        search = self.searchForBrowsingBookTextBox.text()
        if(search == ""):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "Please fill all the fields!"
            )
        else:
            if(self.searchByAuthorRadio.isChecked()):
                self.clearBrowsingBookTable()
                searchResult = Queries.searchByAuthor(search)
                rowNumSearch = 0
                for row in searchResult:
                        self.browsingBooksTable.setRowCount(rowNumSearch + 1)
                        self.browsingBooksTable.setItem(rowNumSearch, 0, QtWidgets.QTableWidgetItem(str(row[0])))
                        self.browsingBooksTable.setItem(rowNumSearch, 1, QtWidgets.QTableWidgetItem(str(row[1])))
                        self.browsingBooksTable.setItem(rowNumSearch, 2, QtWidgets.QTableWidgetItem(str(row[2])))
                        self.browsingBooksTable.setItem(rowNumSearch, 3, QtWidgets.QTableWidgetItem(str(row[3])))
                        self.browsingBooksTable.setItem(rowNumSearch, 4, QtWidgets.QTableWidgetItem(str(row[4])))
                        self.browsingBooksTable.setItem(rowNumSearch, 5, QtWidgets.QTableWidgetItem(str(row[5])))
                        rowNumSearch += 1

            elif(self.searchByISBNRadio.isChecked()):
                self.clearBrowsingBookTable()
                searchResult = Queries.searchByISBN(search)
                rowNumSearch = 0
                for row in searchResult:
                        self.browsingBooksTable.setRowCount(rowNumSearch + 1)
                        self.browsingBooksTable.setItem(rowNumSearch, 0, QtWidgets.QTableWidgetItem(str(row[0])))
                        self.browsingBooksTable.setItem(rowNumSearch, 1, QtWidgets.QTableWidgetItem(str(row[1])))
                        self.browsingBooksTable.setItem(rowNumSearch, 2, QtWidgets.QTableWidgetItem(str(row[2])))
                        self.browsingBooksTable.setItem(rowNumSearch, 3, QtWidgets.QTableWidgetItem(str(row[3])))
                        self.browsingBooksTable.setItem(rowNumSearch, 4, QtWidgets.QTableWidgetItem(str(row[4])))
                        self.browsingBooksTable.setItem(rowNumSearch, 5, QtWidgets.QTableWidgetItem(str(row[5])))
                        rowNumSearch += 1

            elif(self.searchByPublicationYearRadio.isChecked()):
                self.clearBrowsingBookTable()
                searchResult = Queries.searchByYear(search)
                rowNumSearch = 0
                for row in searchResult:
                        self.browsingBooksTable.setRowCount(rowNumSearch + 1)
                        self.browsingBooksTable.setItem(rowNumSearch, 0, QtWidgets.QTableWidgetItem(str(row[0])))
                        self.browsingBooksTable.setItem(rowNumSearch, 1, QtWidgets.QTableWidgetItem(str(row[1])))
                        self.browsingBooksTable.setItem(rowNumSearch, 2, QtWidgets.QTableWidgetItem(str(row[2])))
                        self.browsingBooksTable.setItem(rowNumSearch, 3, QtWidgets.QTableWidgetItem(str(row[3])))
                        self.browsingBooksTable.setItem(rowNumSearch, 4, QtWidgets.QTableWidgetItem(str(row[4])))
                        self.browsingBooksTable.setItem(rowNumSearch, 5, QtWidgets.QTableWidgetItem(str(row[5])))
                        rowNumSearch += 1

            elif(self.searchByTitleRadio.isChecked()):
                self.clearBrowsingBookTable()
                searchResult = Queries.searchByTitle(search)
                rowNumSearch = 0
                for row in searchResult:
                        self.browsingBooksTable.setRowCount(rowNumSearch + 1)
                        self.browsingBooksTable.setItem(rowNumSearch, 0, QtWidgets.QTableWidgetItem(str(row[0])))
                        self.browsingBooksTable.setItem(rowNumSearch, 1, QtWidgets.QTableWidgetItem(str(row[1])))
                        self.browsingBooksTable.setItem(rowNumSearch, 2, QtWidgets.QTableWidgetItem(str(row[2])))
                        self.browsingBooksTable.setItem(rowNumSearch, 3, QtWidgets.QTableWidgetItem(str(row[3])))
                        self.browsingBooksTable.setItem(rowNumSearch, 4, QtWidgets.QTableWidgetItem(str(row[4])))
                        self.browsingBooksTable.setItem(rowNumSearch, 5, QtWidgets.QTableWidgetItem(str(row[5])))
                        rowNumSearch += 1

    def deleteBook_clicked(self):
        ISBN = self.enterISBNTextBox.text()
        if(ISBN == "" or not Queries.checkIfBookExists(int(ISBN))):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "Please fill all the fields, and make sure the ISBN exists!"
            )
        else:
            Queries.deleteFromCopyByISBN(ISBN)
            Queries.deleteFromBook(ISBN)
            Queries.deleteFromWrite(ISBN)
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Success",
                "Book successfully deleted!"
            )
            self.updatingTables()
          
    def updateBookSubmit_clicked(self):
        ISBN = self.enterISBNTextBox.text()
        number = self.newNumCopiesTextBox.text()
        Queries.updateCopy(int(number), ISBN)
        QtWidgets.QMessageBox.information(
            self.addNewBookWidget,
            "Success",
            "Book successfully updated!"
        )

    def borrow_clicked(self):
        ISBN = self.ISBNBorrowTextBox.text()
        today = date.today()
        returnDate = today + timedelta(days=7)
        if(ISBN == ""):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "Please fill the field!"
            )
            return
        elif(Queries.checkIfBookExists(int(ISBN)) == False):
                QtWidgets.QMessageBox.information(
                        self.addNewBookWidget,
                        "Error",
                        "Please fill the field with a valid ISBN!"
                )
                return
        elif(Queries.checkIfAvailableCopy(int(ISBN)) == False):
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "Book is already borrowed!"
            )
        else:
            num = Queries.selectAvailableCopyByISBN(ISBN)
            Queries.insertIntoBorrow(returnDate, today, Queries.createUniqueBorrowID(), ISBN, User.logged_in_user.userID, num)
            Queries.updateAvailableCopyByISBN(int(num), int(ISBN))
            QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Success",
                "Book successfully borrowed!"
            )
    
    def update_clicked(self):
        ISBN = self.enterISBNTextBox.text()
        if(ISBN == "" or not Queries.checkIfBookExists(int(ISBN))):
             QtWidgets.QMessageBox.information(
                self.addNewBookWidget,
                "Error",
                "Please fill all the fields, and make sure the ISBN exists!")
        else:
            self.updateBookInfoWidget.show()
            self.updateDeleteBookWidget.hide()
            self.browsingBooksWidget.hide()
            self.addNewBookWidget.hide()
            self.updateInfoWidget.hide()
            self.welcomePageWidget.hide()
            
    def setupUi(self, UniversityLibraryManagement):
        UniversityLibraryManagement.setObjectName("UniversityLibraryManagement")
        UniversityLibraryManagement.resize(1100, 700)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        UniversityLibraryManagement.setFont(font)
        UniversityLibraryManagement.setStyleSheet("QMainWindow{\n"
"background-image: url(\"assets/bg_2.png\");\n"
"background-position: top left;\n"
"background-repeat: no-repeat;\n"
"background-size: cover;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(UniversityLibraryManagement)
        self.centralwidget.setObjectName("centralwidget")

# -------------------------------------------------------------------------Welcome Page Widget--------------------------------------------------------------------------------
        self.welcomePageWidget = QtWidgets.QWidget(self.centralwidget)
        self.welcomePageWidget.setGeometry(QtCore.QRect(10, 140, 1081, 501))
        self.welcomePageWidget.setObjectName("welcomePageWidget")
        self.welcomMessage = QtWidgets.QLabel(self.welcomePageWidget)
        self.welcomMessage.setGeometry(QtCore.QRect(210, 110, 711, 101))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)

        # welcome message
        self.welcomMessage.setFont(font)
        self.welcomMessage.setObjectName("welcomMessage")
        #login buttom
        self.loginButtomWelcomePage = QtWidgets.QPushButton(self.welcomePageWidget)
        self.loginButtomWelcomePage.setGeometry(QtCore.QRect(330, 260, 110, 30))
        self.loginButtomWelcomePage.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.loginButtomWelcomePage.setObjectName("loginButtomWelcomePage")
        #register buttom
        self.registerButtomWelcomePage = QtWidgets.QPushButton(self.welcomePageWidget)
        self.registerButtomWelcomePage.setGeometry(QtCore.QRect(640, 260, 110, 30))
        self.registerButtomWelcomePage.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.registerButtomWelcomePage.setObjectName("registerButtomWelcomePage")

# -------------------------------------------------------------------------Header--------------------------------------------------------------------------------
        self.browsingBookHeader = QtWidgets.QPushButton(self.centralwidget)
        self.browsingBookHeader.hide()
        self.browsingBookHeader.setGeometry(QtCore.QRect(970, 20, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.browsingBookHeader.setFont(font)
        self.browsingBookHeader.setStyleSheet("QPushButton {\n"
"        background-color: transparent;\n"
"        border: none;\n"
"        color: #ffffff;\n"
"    }\n"
"\n"
"    QPushButton:hover {\n"
"        color: #373cc4;\n"
"    }")
        self.browsingBookHeader.setObjectName("browsingBookHeader")
        self.updateInfoHeader = QtWidgets.QPushButton(self.centralwidget)
        self.updateInfoHeader.hide()
        self.updateInfoHeader.setGeometry(QtCore.QRect(840, 20, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.updateInfoHeader.setFont(font)
        self.updateInfoHeader.setStyleSheet("QPushButton {\n"
"        background-color: transparent;\n"
"        border: none;\n"
"        color: #ffffff;\n"
"    }\n"
"\n"
"    QPushButton:hover {\n"
"        color: #373cc4;\n"
"    }")
        self.updateInfoHeader.setObjectName("updateInfoHeader")
        self.updateDeleteBookHeader = QtWidgets.QPushButton(self.centralwidget)
        self.updateDeleteBookHeader.hide()
        self.updateDeleteBookHeader.setGeometry(QtCore.QRect(570, 20, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.updateDeleteBookHeader.setFont(font)
        self.updateDeleteBookHeader.setStyleSheet("QPushButton {\n"
"        background-color: transparent;\n"
"        border: none;\n"
"        color: #ffffff;\n"
"    }\n"
"\n"
"    QPushButton:hover {\n"
"        color: #373cc4;\n"
"    }")
        self.updateDeleteBookHeader.setObjectName("updateDeleteBookHeader")
        self.addBookHeader = QtWidgets.QPushButton(self.centralwidget)
        self.addBookHeader.hide()
        self.addBookHeader.setGeometry(QtCore.QRect(450, 20, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.addBookHeader.setFont(font)
        self.addBookHeader.setStyleSheet("QPushButton {\n"
"        background-color: transparent;\n"
"        border: none;\n"
"        color: #ffffff;\n"
"    }\n"
"\n"
"    QPushButton:hover {\n"
"        color: #373cc4;\n"
"    }")
        self.addBookHeader.setObjectName("addBookHeader")

        self.borrowBookHeader = QtWidgets.QPushButton(self.centralwidget)
        self.borrowBookHeader.hide()
        self.borrowBookHeader.setGeometry(QtCore.QRect(730, 20, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.borrowBookHeader.setFont(font)
        self.borrowBookHeader.setStyleSheet("QPushButton {\n"
"        background-color: transparent;\n"
"        border: none;\n"
"        color: #ffffff;\n"
"    }\n"
"\n"
"    QPushButton:hover {\n"
"        color: #373cc4;\n"
"    }")
        self.borrowBookHeader.setObjectName("borrowBookHeader")


# ------------------------------------------------------------------------Borrow page Widget----------------------------------------------------------------------------------
        self.borrowBookWidget = QtWidgets.QWidget(self.centralwidget)
        self.borrowBookWidget.setGeometry(QtCore.QRect(10, 60, 1081, 591))
        self.borrowBookWidget.setObjectName("borrowBookWidget")
        self.borrowBookPageText = QtWidgets.QLabel(self.borrowBookWidget)
        self.borrowBookPageText.setGeometry(QtCore.QRect(350, 10, 411, 101))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.borrowBookPageText.setFont(font)
        self.borrowBookPageText.setObjectName("borrowBookPageText")
        self.borrowBookButtom = QtWidgets.QPushButton(self.borrowBookWidget)
        self.borrowBookButtom.setGeometry(QtCore.QRect(510, 410, 110, 30))
        self.borrowBookWidget.hide()
        self.borrowBookButtom.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.borrowBookButtom.setObjectName("borrowBookButtom")
        self.borrowBookButtom.clicked.connect(self.borrow_clicked)
        self.ISBNBorrowTextBox = QtWidgets.QLineEdit(self.borrowBookWidget)
        self.ISBNBorrowTextBox.setGeometry(QtCore.QRect(390, 270, 341, 41))
        self.ISBNBorrowTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.ISBNBorrowTextBox.setText("")
        self.ISBNBorrowTextBox.setObjectName("ISBNBorrowTextBox")
        self.ISBNBorrowText = QtWidgets.QLabel(self.borrowBookWidget)
        self.ISBNBorrowText.setGeometry(QtCore.QRect(390, 240, 231, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.ISBNBorrowText.setFont(font)
        self.ISBNBorrowText.setObjectName("ISBNBorrowText")

# -------------------------------------------------------------------------Add New Book Widget--------------------------------------------------------------------------------
        self.addNewBookWidget = QtWidgets.QWidget(self.centralwidget)
        self.addNewBookWidget.setGeometry(QtCore.QRect(10, 50, 1081, 601))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(11)
        self.addNewBookWidget.setFont(font)
        self.addNewBookWidget.setObjectName("addNewBookWidget")

        # add new book text
        self.addNewBookText = QtWidgets.QLabel(self.addNewBookWidget)
        self.addNewBookText.setGeometry(QtCore.QRect(360, 0, 391, 61))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.addNewBookText.setFont(font)
        self.addNewBookText.setObjectName("addNewBookText")
        # book title
        self.bookTitleTextBox = QtWidgets.QLineEdit(self.addNewBookWidget)
        self.bookTitleTextBox.setGeometry(QtCore.QRect(390, 180, 341, 41))
        self.bookTitleTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.bookTitleTextBox.setText("")
        self.bookTitleTextBox.setObjectName("bookTitleTextBox")
        # book publication year
        self.bookPublicationYearTextBox = QtWidgets.QLineEdit(self.addNewBookWidget)
        self.bookPublicationYearTextBox.setGeometry(QtCore.QRect(390, 420, 341, 41))
        self.bookPublicationYearTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.bookPublicationYearTextBox.setText("")
        self.bookPublicationYearTextBox.setObjectName("bookPublicationYearTextBox")
        # book category
        self.bookCategoryTextBox = QtWidgets.QLineEdit(self.addNewBookWidget)
        self.bookCategoryTextBox.setGeometry(QtCore.QRect(390, 500, 341, 41))
        self.bookCategoryTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.bookCategoryTextBox.setText("")
        self.bookCategoryTextBox.setObjectName("bookCategoryTextBox")
        # book publisher
        self.bookPublisherNameTextBox = QtWidgets.QLineEdit(self.addNewBookWidget)
        self.bookPublisherNameTextBox.setGeometry(QtCore.QRect(390, 340, 341, 41))
        self.bookPublisherNameTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.bookPublisherNameTextBox.setText("")
        self.bookPublisherNameTextBox.setObjectName("bookPublisherNameTextBox")
        # submit add new book
        self.submitAddNewBook = QtWidgets.QPushButton(self.addNewBookWidget)
        self.submitAddNewBook.setGeometry(QtCore.QRect(500, 560, 110, 30))
        self.submitAddNewBook.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.submitAddNewBook.setObjectName("submitAddNewBook")
        self.submitAddNewBook.clicked.connect(self.submitAddNewBook_clicked)
        # book title
        self.bookTitleText = QtWidgets.QLabel(self.addNewBookWidget)
        self.bookTitleText.setGeometry(QtCore.QRect(390, 150, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.bookTitleText.setFont(font)
        self.bookTitleText.setObjectName("bookTitleText")
        # book pulisher
        self.bookPulisherText = QtWidgets.QLabel(self.addNewBookWidget)
        self.bookPulisherText.setGeometry(QtCore.QRect(390, 310, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.bookPulisherText.setFont(font)
        self.bookPulisherText.setObjectName("bookPulisherText")
        # book publication year
        self.bookPublicationYearText = QtWidgets.QLabel(self.addNewBookWidget)
        self.bookPublicationYearText.setGeometry(QtCore.QRect(390, 390, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.bookPublicationYearText.setFont(font)
        self.bookPublicationYearText.setObjectName("bookPublicationYearText")
        # book category
        self.bookCategoryText = QtWidgets.QLabel(self.addNewBookWidget)
        self.bookCategoryText.setGeometry(QtCore.QRect(390, 470, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.bookCategoryText.setFont(font)
        self.bookCategoryText.setObjectName("bookCategoryText")
        # book author
        self.bookAuthorTextBox = QtWidgets.QLineEdit(self.addNewBookWidget)
        self.bookAuthorTextBox.setGeometry(QtCore.QRect(390, 260, 341, 41))
        self.bookAuthorTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.bookAuthorTextBox.setText("")
        self.bookAuthorTextBox.setObjectName("bookAuthorTextBox")
        self.bookAuthorText = QtWidgets.QLabel(self.addNewBookWidget)
        self.bookAuthorText.setGeometry(QtCore.QRect(390, 230, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.bookAuthorText.setFont(font)
        self.bookAuthorText.setObjectName("bookAuthorText")
        # book ISBN
        self.ISBNTitleTextBox = QtWidgets.QLineEdit(self.addNewBookWidget)
        self.ISBNTitleTextBox.setGeometry(QtCore.QRect(390, 100, 341, 41))
        self.ISBNTitleTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.ISBNTitleTextBox.setText("")
        self.ISBNTitleTextBox.setObjectName("ISBNTitleTextBox")
        self.bookISBNText = QtWidgets.QLabel(self.addNewBookWidget)
        self.bookISBNText.setGeometry(QtCore.QRect(390, 70, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.bookISBNText.setFont(font)
        self.bookISBNText.setObjectName("bookISBNText")

# -------------------------------------------------------------------------Register Page Widget--------------------------------------------------------------------------------
        self.RegisterPageWidget = QtWidgets.QWidget(self.centralwidget)
        self.RegisterPageWidget.setGeometry(QtCore.QRect(380, 90, 391, 551))
        self.RegisterPageWidget.setObjectName("RegisterPageWidget")

        # welcome message
        self.welcomeMessageRegister = QtWidgets.QLabel(self.RegisterPageWidget)
        self.welcomeMessageRegister.setGeometry(QtCore.QRect(-20, 20, 301, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.welcomeMessageRegister.setFont(font)
        self.welcomeMessageRegister.setStyleSheet("QLabel{\n"
"    background-color: #ffffff;\n"
"    border-radius: 8px;\n"
"}")
        self.welcomeMessageRegister.setObjectName("welcomeMessageRegister")
        # email
        self.emailRegisterText = QtWidgets.QLabel(self.RegisterPageWidget)
        self.emailRegisterText.setGeometry(QtCore.QRect(20, 110, 51, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.emailRegisterText.setFont(font)
        self.emailRegisterText.setStyleSheet("QLabel{\n"
" color: #ffffff;\n"
"}\n"
" ")
        self.emailRegisterText.setObjectName("emailRegisterText")
        self.emailRegisterTextBox = QtWidgets.QLineEdit(self.RegisterPageWidget)
        self.emailRegisterTextBox.setGeometry(QtCore.QRect(20, 140, 341, 41))
        self.emailRegisterTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.emailRegisterTextBox.setText("")
        self.emailRegisterTextBox.setObjectName("emailRegisterTextBox")
        # register buttom
        self.registerButtomRegisterPage = QtWidgets.QPushButton(self.RegisterPageWidget)
        self.registerButtomRegisterPage.setGeometry(QtCore.QRect(140, 510, 110, 30))
        self.registerButtomRegisterPage.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.registerButtomRegisterPage.setObjectName("registerButtomRegisterPage")
        self.registerButtomRegisterPage.clicked.connect(self.submitRegisterNewUser_clicked)
        # password
        self.PasswordRegisterText = QtWidgets.QLabel(self.RegisterPageWidget)
        self.PasswordRegisterText.setGeometry(QtCore.QRect(20, 190, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.PasswordRegisterText.setFont(font)
        self.PasswordRegisterText.setStyleSheet("QLabel{\n"
" color: #ffffff;\n"
"}\n"
" ")
        self.PasswordRegisterText.setObjectName("PasswordRegisterText")
        self.passwordRegisterTextBox = QtWidgets.QLineEdit(self.RegisterPageWidget)
        self.passwordRegisterTextBox.setGeometry(QtCore.QRect(20, 220, 341, 41))
        self.passwordRegisterTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.passwordRegisterTextBox.setText("")
        self.passwordRegisterTextBox.setObjectName("passwordRegisterTextBox")
        self.passwordRegisterTextBox.setEchoMode(QtWidgets.QLineEdit.Password)
        # first name
        self.firstNameRegisterText = QtWidgets.QLabel(self.RegisterPageWidget)
        self.firstNameRegisterText.setGeometry(QtCore.QRect(20, 270, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.firstNameRegisterText.setFont(font)
        self.firstNameRegisterText.setStyleSheet("QLabel{\n"
" color: #ffffff;\n"
"}\n"
" ")
        self.firstNameRegisterText.setObjectName("firstNameRegisterText")
        self.firstNameRegisterTextBox = QtWidgets.QLineEdit(self.RegisterPageWidget)
        self.firstNameRegisterTextBox.setGeometry(QtCore.QRect(20, 300, 341, 41))
        self.firstNameRegisterTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.firstNameRegisterTextBox.setText("")
        self.firstNameRegisterTextBox.setObjectName("firstNameRegisterTextBox")
        # last name
        self.lastNameRegisterText = QtWidgets.QLabel(self.RegisterPageWidget)
        self.lastNameRegisterText.setGeometry(QtCore.QRect(20, 350, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lastNameRegisterText.setFont(font)
        self.lastNameRegisterText.setStyleSheet("QLabel{\n"
" color: #ffffff;\n"
"}\n"
" ")
        self.lastNameRegisterText.setObjectName("lastNameRegisterText")
        self.lastNameRegisterTextBox = QtWidgets.QLineEdit(self.RegisterPageWidget)
        self.lastNameRegisterTextBox.setGeometry(QtCore.QRect(20, 380, 341, 41))
        self.lastNameRegisterTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.lastNameRegisterTextBox.setText("")
        self.lastNameRegisterTextBox.setObjectName("lastNameRegisterTextBox")
        # role
        self.role = QtWidgets.QLabel(self.RegisterPageWidget)
        self.role.setGeometry(QtCore.QRect(30, 430, 51, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.role.setFont(font)
        self.role.setStyleSheet("QLabel{\n"
" color: #ffffff;\n"
"}\n"
" ")
        self.role.setObjectName("role")
        self.adminRoleButtom = QtWidgets.QRadioButton(self.RegisterPageWidget)
        self.adminRoleButtom.setGeometry(QtCore.QRect(40, 460, 71, 20))
        self.adminRoleButtom.setStyleSheet("QRadioButton{\n"
" color: #ffffff;\n"
"}\n"
" ")
        self.adminRoleButtom.setObjectName("adminRoleButtom")
        self.studentRoleButtom = QtWidgets.QRadioButton(self.RegisterPageWidget)
        self.studentRoleButtom.setGeometry(QtCore.QRect(160, 460, 81, 20))
        self.studentRoleButtom.setStyleSheet("QRadioButton{\n"
" color: #ffffff;\n"
"}\n"
" ")
        self.studentRoleButtom.setObjectName("studentRoleButtom")

# -----------------------------------------------------------------------Update Delete Book Page Widget--------------------------------------------------------------------------------
        self.updateDeleteBookWidget = QtWidgets.QWidget(self.centralwidget)
        self.updateDeleteBookWidget.setGeometry(QtCore.QRect(10, 60, 1081, 581))
        self.updateDeleteBookWidget.setObjectName("updateDeleteBookWidget")

        # update delete book text
        self.updateDeleteBookText = QtWidgets.QLabel(self.updateDeleteBookWidget)
        self.updateDeleteBookText.setGeometry(QtCore.QRect(270, 10, 501, 61))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.updateDeleteBookText.setFont(font)
        self.updateDeleteBookText.setStyleSheet("")
        self.updateDeleteBookText.setObjectName("updateDeleteBookText")
        # ISBN
        self.enterISBNTextBox = QtWidgets.QLineEdit(self.updateDeleteBookWidget)
        self.enterISBNTextBox.setGeometry(QtCore.QRect(50, 440, 371, 41))
        self.enterISBNTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.enterISBNTextBox.setObjectName("enterISBNTextBox")
        # update delete book table
        self.updateDeleteBookTable = QtWidgets.QTableWidget(self.updateDeleteBookWidget)
        self.updateDeleteBookTable.setGeometry(QtCore.QRect(50, 90, 961, 301))
        self.updateDeleteBookTable.setStyleSheet("QTableWidget {\n"
"  background-color: transparent;\n"
"  border: 1px solid #7194D2;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"QTableWidget::item:first {\n"
"   background-color: #e6e6e6; \n"
"   border-radius: 8px;\n"
"}")
        self.updateDeleteBookTable.setObjectName("updateDeleteBookTable")
        self.updateDeleteBookTable.setColumnCount(6)
        self.updateDeleteBookTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.updateDeleteBookTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.updateDeleteBookTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.updateDeleteBookTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.updateDeleteBookTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.updateDeleteBookTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.updateDeleteBookTable.setHorizontalHeaderItem(5, item)
        self.enterISBNText = QtWidgets.QLabel(self.updateDeleteBookWidget)
        self.enterISBNText.setGeometry(QtCore.QRect(50, 410, 291, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)

        bookListUpdateDelete = Queries.selectAllFromBook()
        categoriesListUpdateDelete = Queries.selectAllBooksCategories()
        authersListUpdateDelete = Queries.selectAllBookAuthors()
        
        rowNumUpdateDelete = 0
        for row in bookListUpdateDelete:
            self.updateDeleteBookTable.setRowCount(rowNumUpdateDelete + 1)
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 1, QtWidgets.QTableWidgetItem(str(row[1])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 2, QtWidgets.QTableWidgetItem(str(authersListUpdateDelete[rowNumUpdateDelete][0])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 3, QtWidgets.QTableWidgetItem(str(row[2])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 4, QtWidgets.QTableWidgetItem(str(row[3])))
            self.updateDeleteBookTable.setItem(rowNumUpdateDelete, 5, QtWidgets.QTableWidgetItem(str(categoriesListUpdateDelete[rowNumUpdateDelete][0])))
            rowNumUpdateDelete += 1

        # ISBN
        self.enterISBNText.setFont(font)
        self.enterISBNText.setObjectName("enterISBNText")
        # delete buttom
        self.deleteBookButtom = QtWidgets.QPushButton(self.updateDeleteBookWidget)
        self.deleteBookButtom.setGeometry(QtCore.QRect(309, 510, 121, 31))
        self.deleteBookButtom.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.deleteBookButtom.setObjectName("deleteBookButtom")
        self.deleteBookButtom.clicked.connect(self.deleteBook_clicked)
        # update buttom
        self.updateBookButtom = QtWidgets.QPushButton(self.updateDeleteBookWidget)
        self.updateBookButtom.setGeometry(QtCore.QRect(579, 510, 121, 31))
        self.updateBookButtom.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.updateBookButtom.setObjectName("updateBookButtom")

# -------------------------------------------------------------------------Update Book Info Page Widget--------------------------------------------------------------------------------
        self.updateBookInfoWidget = QtWidgets.QWidget(self.centralwidget)
        self.updateBookInfoWidget.setGeometry(QtCore.QRect(380, 90, 391, 551))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.updateBookInfoWidget.setFont(font)
        self.updateBookInfoWidget.setStyleSheet("")
        self.updateBookInfoWidget.setObjectName("updateBookInfoWidget")

        # number of copies
        self.newNumCopiesTextBox = QtWidgets.QLineEdit(self.updateBookInfoWidget)
        self.newNumCopiesTextBox.setGeometry(QtCore.QRect(20, 240, 341, 41))
        self.newNumCopiesTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.newNumCopiesTextBox.setText("")
        self.newNumCopiesTextBox.setObjectName("newNumCopiesTextBox")
        # update buttom
        self.updateNumCopiesButtom = QtWidgets.QPushButton(self.updateBookInfoWidget)
        self.updateNumCopiesButtom.setGeometry(QtCore.QRect(140, 370, 110, 30))
        self.updateNumCopiesButtom.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.updateNumCopiesButtom.setObjectName("updateNumCopiesButtom")
        self.updateNumCopiesButtom.clicked.connect(self.updateBookSubmit_clicked)
        # number of copies text
        self.newNumCopiesText = QtWidgets.QLabel(self.updateBookInfoWidget)
        self.newNumCopiesText.setGeometry(QtCore.QRect(20, 210, 281, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.newNumCopiesText.setFont(font)
        self.newNumCopiesText.setObjectName("newNumCopiesText")
        # update book info text
        self.updateBookInfoText = QtWidgets.QLabel(self.updateBookInfoWidget)
        self.updateBookInfoText.setGeometry(QtCore.QRect(-20, 20, 251, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.updateBookInfoText.setFont(font)
        self.updateBookInfoText.setStyleSheet("QLabel{\n"
"    background-color: #ffffff;\n"
"    border-radius: 8px;\n"
"}")
        self.updateBookInfoText.setObjectName("updateBookInfoText")

# -------------------------------------------------------------------------Login Page Widget--------------------------------------------------------------------------------
        self.loginPageWidget = QtWidgets.QWidget(self.centralwidget)
        self.loginPageWidget.setGeometry(QtCore.QRect(380, 90, 390, 551))
        self.loginPageWidget.setObjectName("loginPageWidget")

        # login buttom
        self.LoginButtomLoginPage = QtWidgets.QPushButton(self.loginPageWidget)
        self.LoginButtomLoginPage.setGeometry(QtCore.QRect(130, 410, 110, 30))
        self.LoginButtomLoginPage.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.LoginButtomLoginPage.setObjectName("LoginButtomLoginPage")
        self.LoginButtomLoginPage.clicked.connect(self.submitLogin_clicked)
        # password login
        self.passwordLoninText = QtWidgets.QLabel(self.loginPageWidget)
        self.passwordLoninText.setGeometry(QtCore.QRect(20, 260, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.passwordLoninText.setFont(font)
        self.passwordLoninText.setStyleSheet("QLabel{\n"
" color: #ffffff;\n"
"}\n"
" ")
        self.passwordLoninText.setObjectName("passwordLoninText")
        self.passwordLoninTextBox = QtWidgets.QLineEdit(self.loginPageWidget)
        self.passwordLoninTextBox.setGeometry(QtCore.QRect(20, 280, 341, 41))
        self.passwordLoninTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.passwordLoninTextBox.setText("")
        self.passwordLoninTextBox.setObjectName("passwordLoninTextBox")
        self.passwordLoninTextBox.setEchoMode(QtWidgets.QLineEdit.Password)
        # email login
        self.emailLoginTextBox = QtWidgets.QLineEdit(self.loginPageWidget)
        self.emailLoginTextBox.setGeometry(QtCore.QRect(20, 210, 341, 41))
        self.emailLoginTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.emailLoginTextBox.setText("")
        self.emailLoginTextBox.setObjectName("emailLoginTextBox")
        self.emailLoginText = QtWidgets.QLabel(self.loginPageWidget)
        self.emailLoginText.setGeometry(QtCore.QRect(20, 190, 51, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.emailLoginText.setFont(font)
        self.emailLoginText.setStyleSheet("QLabel{\n"
" color: #ffffff;\n"
"}\n"
" ")
        self.emailLoginText.setObjectName("emailLoginText")
        # welcome again text
        self.welcomeAgainText = QtWidgets.QLabel(self.loginPageWidget)
        self.welcomeAgainText.setGeometry(QtCore.QRect(-20, 20, 271, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.welcomeAgainText.setFont(font)
        self.welcomeAgainText.setStyleSheet("QLabel{\n"
"    background-color: #ffffff;\n"
"    border-radius: 8px;\n"
"}")
        self.welcomeAgainText.setObjectName("welcomeAgainText")

# -------------------------------------------------------------------------Browsing Books Page Widget--------------------------------------------------------------------------------
        self.browsingBooksWidget = QtWidgets.QWidget(self.centralwidget)
        self.browsingBooksWidget.setGeometry(QtCore.QRect(10, 60, 1081, 581))
        self.browsingBooksWidget.setObjectName("browsingBooksWidget")

        # browsing books text
        self.browsingBookText = QtWidgets.QLabel(self.browsingBooksWidget)
        self.browsingBookText.setGeometry(QtCore.QRect(370, 20, 331, 61))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.browsingBookText.setFont(font)
        self.browsingBookText.setStyleSheet("")
        self.browsingBookText.setObjectName("browsingBookText")
        # browsing books table
        self.browsingBooksTable = QtWidgets.QTableWidget(self.browsingBooksWidget)
        self.browsingBooksTable.setGeometry(QtCore.QRect(60, 230, 961, 301))
        self.browsingBooksTable.setStyleSheet("QTableWidget {\n"
"  background-color: transparent;\n"
"  border: 1px solid #7194D2;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"QTableWidget::item:first {\n"
"   background-color: #e6e6e6; \n"
"   border-radius: 8px;\n"
"}")
        self.browsingBooksTable.setObjectName("browsingBooksTable")
        self.browsingBooksTable.setColumnCount(6)
        self.browsingBooksTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.browsingBooksTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.browsingBooksTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.browsingBooksTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.browsingBooksTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.browsingBooksTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.browsingBooksTable.setHorizontalHeaderItem(5, item)
        self.searchBrowsingBookText = QtWidgets.QLabel(self.browsingBooksWidget)
        self.searchBrowsingBookText.setGeometry(QtCore.QRect(90, 100, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)

        bookListBrowsing = Queries.selectAllFromBook()
        categoriesListBrowsing = Queries.selectAllBooksCategories()
        authersListBrowsing = Queries.selectAllBookAuthors()
        
        rowNumBrowsing = 0
        for row in bookListBrowsing:
            self.browsingBooksTable.setRowCount(rowNumBrowsing + 1)
            self.browsingBooksTable.setItem(rowNumBrowsing, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 1, QtWidgets.QTableWidgetItem(str(row[1])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 2, QtWidgets.QTableWidgetItem(str(authersListBrowsing[rowNumBrowsing][0])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 3, QtWidgets.QTableWidgetItem(str(row[2])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 4, QtWidgets.QTableWidgetItem(str(row[3])))
            self.browsingBooksTable.setItem(rowNumBrowsing, 5, QtWidgets.QTableWidgetItem(str(categoriesListBrowsing[rowNumBrowsing][0])))
            rowNumBrowsing += 1

        # search 
        self.searchBrowsingBookText.setFont(font)
        self.searchBrowsingBookText.setStyleSheet("")
        self.searchBrowsingBookText.setObjectName("searchBrowsingBookText")
        self.searchForBrowsingBookTextBox = QtWidgets.QLineEdit(self.browsingBooksWidget)
        self.searchForBrowsingBookTextBox.setGeometry(QtCore.QRect(90, 130, 601, 41))
        self.searchForBrowsingBookTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.searchForBrowsingBookTextBox.setObjectName("searchForBrowsingBookTextBox")
        self.searchButtomBrowsingBook = QtWidgets.QPushButton(self.browsingBooksWidget)
        self.searchButtomBrowsingBook.setGeometry(QtCore.QRect(620, 140, 51, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.searchButtomBrowsingBook.setFont(font)
        self.searchButtomBrowsingBook.setStyleSheet("QPushButton {\n"
"        background-color: transparent;\n"
"        border: none;\n"
"        color: #373cc4;\n"
"    }\n"
"\n"
"    QPushButton:hover {\n"
"        color: #000000;\n"
"    }")
        self.searchButtomBrowsingBook.setObjectName("searchButtomBrowsingBook")
        self.searchButtomBrowsingBook.clicked.connect(self.SubmitSearchBook_clicked)
        # search by radio buttoms
        self.searchByISBNRadio = QtWidgets.QRadioButton(self.browsingBooksWidget)
        self.searchByISBNRadio.setGeometry(QtCore.QRect(100, 180, 111, 20))
        self.searchByISBNRadio.setObjectName("searchByISBNRadio")
        self.searchByTitleRadio = QtWidgets.QRadioButton(self.browsingBooksWidget)
        self.searchByTitleRadio.setGeometry(QtCore.QRect(230, 180, 111, 20))
        self.searchByTitleRadio.setObjectName("searchByTitleRadio")
        self.searchByAuthorRadio = QtWidgets.QRadioButton(self.browsingBooksWidget)
        self.searchByAuthorRadio.setGeometry(QtCore.QRect(360, 180, 131, 20))
        self.searchByAuthorRadio.setObjectName("searchByAuthorRadio")
        self.searchByPublicationYearRadio = QtWidgets.QRadioButton(self.browsingBooksWidget)
        self.searchByPublicationYearRadio.setGeometry(QtCore.QRect(500, 180, 171, 20))
        self.searchByPublicationYearRadio.setObjectName("searchByPublicationYearRadio")

# -------------------------------------------------------------------------Update User Info Page Widget--------------------------------------------------------------------------------
        self.updateInfoWidget = QtWidgets.QWidget(self.centralwidget)
        self.updateInfoWidget.setGeometry(QtCore.QRect(10, 60, 1081, 581))
        self.updateInfoWidget.setObjectName("updateInfoWidget")

        # email
        self.emailTextBox = QtWidgets.QLineEdit(self.updateInfoWidget)
        self.emailTextBox.setGeometry(QtCore.QRect(390, 160, 341, 41))
        self.emailTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.emailTextBox.setText("")
        self.emailTextBox.setObjectName("emailTextBox")
        # password
        self.passwordTextBox = QtWidgets.QLineEdit(self.updateInfoWidget)
        self.passwordTextBox.setGeometry(QtCore.QRect(390, 240, 341, 41))
        self.passwordTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.passwordTextBox.setObjectName("passwordTextBox")
        # first name
        self.firstNameTextBox = QtWidgets.QLineEdit(self.updateInfoWidget)
        self.firstNameTextBox.setGeometry(QtCore.QRect(390, 320, 341, 41))
        self.firstNameTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.firstNameTextBox.setObjectName("firstNameTextBox")
        # last name
        self.lastNameTextBox = QtWidgets.QLineEdit(self.updateInfoWidget)
        self.lastNameTextBox.setGeometry(QtCore.QRect(390, 400, 341, 41))
        self.lastNameTextBox.setStyleSheet("QLineEdit {\n"
"  border: 1px solid #7194D2;\n"
"  background-color: #ffff;\n"
"  border-radius: 8px;\n"
"}\n"
"")
        self.lastNameTextBox.setObjectName("lastNameTextBox")
        # update info text
        self.updateInfoText = QtWidgets.QLabel(self.updateInfoWidget)
        self.updateInfoText.setGeometry(QtCore.QRect(370, 40, 371, 51))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.updateInfoText.setFont(font)
        self.updateInfoText.setObjectName("updateInfoText")
        # email
        self.emailTextUpdateInfo = QtWidgets.QLabel(self.updateInfoWidget)
        self.emailTextUpdateInfo.setGeometry(QtCore.QRect(390, 130, 51, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.emailTextUpdateInfo.setFont(font)
        self.emailTextUpdateInfo.setObjectName("emailTextUpdateInfo")
        # password
        self.passwordTextUpdateInfo = QtWidgets.QLabel(self.updateInfoWidget)
        self.passwordTextUpdateInfo.setGeometry(QtCore.QRect(390, 210, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.passwordTextUpdateInfo.setFont(font)
        self.passwordTextUpdateInfo.setObjectName("passwordTextUpdateInfo")
        # first name
        self.firstNameTextUpdateInfo = QtWidgets.QLabel(self.updateInfoWidget)
        self.firstNameTextUpdateInfo.setGeometry(QtCore.QRect(390, 290, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.firstNameTextUpdateInfo.setFont(font)
        self.firstNameTextUpdateInfo.setObjectName("firstNameTextUpdateInfo")
        # last name
        self.lastNameTextUpdateInfo = QtWidgets.QLabel(self.updateInfoWidget)
        self.lastNameTextUpdateInfo.setGeometry(QtCore.QRect(390, 370, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lastNameTextUpdateInfo.setFont(font)
        self.lastNameTextUpdateInfo.setObjectName("lastNameTextUpdateInfo")
        # submit update info
        self.submitUpdateUserInfo = QtWidgets.QPushButton(self.updateInfoWidget)
        self.submitUpdateUserInfo.setGeometry(QtCore.QRect(510, 490, 110, 30))
        self.submitUpdateUserInfo.setStyleSheet("QPushButton{\n"
"  background-color: #383d42;\n"
"  color: white;\n"
"  font-size: 16px;\n"
"  font-style: bold;\n"
"  border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"   background-color: #646569;\n"
"}")
        self.submitUpdateUserInfo.setObjectName("submitUpdateUserInfo")
        self.submitUpdateUserInfo.clicked.connect(self.UpdateUserInfo_clicked)

# -------------------------------------------------------------------------------------Spells--------------------------------------------------------------------------------
        self.updateDeleteBookWidget.raise_()
        self.browsingBookHeader.raise_()
        self.updateInfoHeader.raise_()
        self.updateDeleteBookHeader.raise_()
        self.addBookHeader.raise_()
        self.addNewBookWidget.raise_()
        self.borrowBookHeader.raise_()
        self.borrowBookWidget.raise_()
        self.RegisterPageWidget.raise_()
        self.loginPageWidget.raise_()
        self.updateBookInfoWidget.raise_()
        self.browsingBooksWidget.raise_()
        self.updateInfoWidget.raise_()
        self.welcomePageWidget.raise_()
        UniversityLibraryManagement.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(UniversityLibraryManagement)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1100, 26))
        self.menubar.setObjectName("menubar")
        UniversityLibraryManagement.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(UniversityLibraryManagement)
        self.statusbar.setObjectName("statusbar")
        UniversityLibraryManagement.setStatusBar(self.statusbar)

        self.retranslateUi(UniversityLibraryManagement)
        self.RegisterPageWidget.hide()
        self.addNewBookWidget.hide()
        
        self.updateInfoWidget.hide()
        self.browsingBooksWidget.hide()
        self.updateDeleteBookWidget.hide()
        self.updateBookInfoWidget.hide()
        self.loginPageWidget.hide()
        self.addBookHeader.clicked.connect(self.addNewBookWidget.show) # type: ignore
        self.addBookHeader.clicked.connect(self.welcomePageWidget.hide) # type: ignore
        self.addBookHeader.clicked.connect(self.updateInfoWidget.hide) # type: ignore
        self.addBookHeader.clicked.connect(self.RegisterPageWidget.hide) # type: ignore
        self.addBookHeader.clicked.connect(self.browsingBooksWidget.hide) # type: ignore
        self.addBookHeader.clicked.connect(self.updateDeleteBookWidget.hide) # type: ignore
        self.addBookHeader.clicked.connect(self.updateBookInfoWidget.hide) # type: ignore
        self.updateDeleteBookHeader.clicked.connect(self.updateDeleteBookWidget.show) # type: ignore
        self.updateDeleteBookHeader.clicked.connect(self.welcomePageWidget.hide) # type: ignore
        self.updateDeleteBookHeader.clicked.connect(self.updateInfoWidget.hide) # type: ignore
        self.updateDeleteBookHeader.clicked.connect(self.addNewBookWidget.hide) # type: ignore
        self.updateDeleteBookHeader.clicked.connect(self.RegisterPageWidget.hide) # type: ignore
        self.updateDeleteBookHeader.clicked.connect(self.browsingBooksWidget.hide) # type: ignore
        self.updateDeleteBookHeader.clicked.connect(self.updateBookInfoWidget.hide) # type: ignore
        self.updateInfoHeader.clicked.connect(self.updateInfoWidget.show) # type: ignore
        self.updateInfoHeader.clicked.connect(self.welcomePageWidget.hide) # type: ignore
        self.updateInfoHeader.clicked.connect(self.addNewBookWidget.hide) # type: ignore
        self.updateInfoHeader.clicked.connect(self.RegisterPageWidget.hide) # type: ignore
        self.updateInfoHeader.clicked.connect(self.browsingBooksWidget.hide) # type: ignore
        self.updateInfoHeader.clicked.connect(self.updateDeleteBookWidget.hide) # type: ignore
        self.updateInfoHeader.clicked.connect(self.updateBookInfoWidget.hide) # type: ignore
        self.browsingBookHeader.clicked.connect(self.browsingBooksWidget.show) # type: ignore
        self.browsingBookHeader.clicked.connect(self.welcomePageWidget.hide) # type: ignore
        self.browsingBookHeader.clicked.connect(self.updateInfoWidget.hide) # type: ignore
        self.browsingBookHeader.clicked.connect(self.addNewBookWidget.hide) # type: ignore
        self.browsingBookHeader.clicked.connect(self.RegisterPageWidget.hide) # type: ignore
        self.browsingBookHeader.clicked.connect(self.updateDeleteBookWidget.hide) # type: ignore
        self.browsingBookHeader.clicked.connect(self.updateBookInfoWidget.hide) # type: ignore
        self.registerButtomWelcomePage.clicked.connect(self.RegisterPageWidget.show) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.welcomePageWidget.hide) # type: ignore
        self.registerButtomWelcomePage.clicked.connect(self.welcomePageWidget.hide) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.updateInfoWidget.hide) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.addNewBookWidget.hide) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.browsingBooksWidget.hide) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.updateDeleteBookWidget.hide) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.updateBookInfoWidget.hide) # type: ignore
        self.registerButtomWelcomePage.clicked.connect(self.updateInfoWidget.hide) # type: ignore
        self.registerButtomWelcomePage.clicked.connect(self.addNewBookWidget.hide) # type: ignore
        self.registerButtomWelcomePage.clicked.connect(self.browsingBooksWidget.hide) # type: ignore
        self.registerButtomWelcomePage.clicked.connect(self.updateDeleteBookWidget.hide) # type: ignore
        self.registerButtomWelcomePage.clicked.connect(self.updateBookInfoWidget.hide) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.RegisterPageWidget.hide) # type: ignore



        # self.updateBookButtom.clicked.connect(self.updateBookInfoWidget.show) # type: ignore
        # self.updateBookButtom.clicked.connect(self.updateDeleteBookWidget.hide) # type: ignore
        # self.updateBookButtom.clicked.connect(self.browsingBooksWidget.hide) # type: ignore
        # self.updateBookButtom.clicked.connect(self.addNewBookWidget.hide) # type: ignore
        # self.updateBookButtom.clicked.connect(self.updateInfoWidget.hide) # type: ignore
        # self.updateBookButtom.clicked.connect(self.welcomePageWidget.hide) # type: ignore
        self.updateBookButtom.clicked.connect(self.update_clicked) # type: ignore

        
        self.updateDeleteBookHeader.clicked.connect(self.updateBookInfoWidget.hide) # type: ignore
        self.updateBookButtom.clicked.connect(self.RegisterPageWidget.hide) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.loginPageWidget.show) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.welcomePageWidget.hide) # type: ignore
        self.addBookHeader.clicked.connect(self.loginPageWidget.hide) # type: ignore
        self.updateDeleteBookHeader.clicked.connect(self.loginPageWidget.hide) # type: ignore
        self.updateInfoHeader.clicked.connect(self.loginPageWidget.hide) # type: ignore
        self.browsingBookHeader.clicked.connect(self.loginPageWidget.hide) # type: ignore
        self.registerButtomWelcomePage.clicked.connect(self.loginPageWidget.hide) # type: ignore
        self.registerButtomRegisterPage.clicked.connect(self.RegisterPageWidget.hide) # type: ignore
        #self.LoginButtomLoginPage.clicked.connect(self.loginPageWidget.hide) # type: ignore
        self.loginButtomWelcomePage.clicked.connect(self.changeLoginBG) # type: ignore
        self.registerButtomWelcomePage.clicked.connect(self.changeLoginBG) # type: ignore
        self.browsingBookHeader.clicked.connect(self.borrowBookWidget.hide) # type: ignore
        self.updateInfoHeader.clicked.connect(self.borrowBookWidget.hide) # type: ignore
        self.updateDeleteBookHeader.clicked.connect(self.borrowBookWidget.hide) # type: ignore
        self.addBookHeader.clicked.connect(self.borrowBookWidget.hide) # type: ignore
        self.borrowBookHeader.clicked.connect(self.borrowBookWidget.show) # type: ignore
        self.borrowBookHeader.clicked.connect(self.welcomePageWidget.hide) # type: ignore
        self.borrowBookHeader.clicked.connect(self.browsingBooksWidget.hide) # type: ignore
        self.borrowBookHeader.clicked.connect(self.addNewBookWidget.hide) # type: ignore
        self.borrowBookHeader.clicked.connect(self.updateDeleteBookWidget.hide) # type: ignore
        self.borrowBookHeader.clicked.connect(self.RegisterPageWidget.hide) # type: ignore
        self.borrowBookHeader.clicked.connect(self.loginPageWidget.hide) # type: ignore
        self.borrowBookHeader.clicked.connect(self.updateBookInfoWidget.hide) # type: ignore
        self.borrowBookHeader.clicked.connect(self.updateInfoWidget.hide) # type: ignore
        
        QtCore.QMetaObject.connectSlotsByName(UniversityLibraryManagement)

    def retranslateUi(self, UniversityLibraryManagement):
        _translate = QtCore.QCoreApplication.translate
        UniversityLibraryManagement.setWindowTitle(_translate("UniversityLibraryManagement", "University Library Management"))
        self.welcomMessage.setText(_translate("UniversityLibraryManagement", "Welcome to our Library Management System!"))
        self.loginButtomWelcomePage.setText(_translate("UniversityLibraryManagement", "Login"))
        self.registerButtomWelcomePage.setText(_translate("UniversityLibraryManagement", "Register"))
        self.browsingBookHeader.setText(_translate("UniversityLibraryManagement", "Browsing Books"))
        self.updateInfoHeader.setText(_translate("UniversityLibraryManagement", "Update Your Info |"))
        self.updateDeleteBookHeader.setText(_translate("UniversityLibraryManagement", "Update Or Delete Book |"))
        self.addBookHeader.setText(_translate("UniversityLibraryManagement", "Add New Book |"))
        self.addNewBookText.setText(_translate("UniversityLibraryManagement", "Adding New Book"))
        self.submitAddNewBook.setText(_translate("UniversityLibraryManagement", "Submit"))
        self.bookTitleText.setText(_translate("UniversityLibraryManagement", "Book Title:"))
        self.bookPulisherText.setText(_translate("UniversityLibraryManagement", "Book Publisher Name:"))
        self.bookPublicationYearText.setText(_translate("UniversityLibraryManagement", "Book Publication Year:"))
        self.bookCategoryText.setText(_translate("UniversityLibraryManagement", "Book Category:"))
        self.bookAuthorText.setText(_translate("UniversityLibraryManagement", "Book Author:"))
        self.bookISBNText.setText(_translate("UniversityLibraryManagement", "Book ISBN:"))
        self.welcomeMessageRegister.setText(_translate("UniversityLibraryManagement", "    Welcome To Our System!"))
        self.emailRegisterText.setText(_translate("UniversityLibraryManagement", "Email:"))
        self.registerButtomRegisterPage.setText(_translate("UniversityLibraryManagement", "Register"))
        self.PasswordRegisterText.setText(_translate("UniversityLibraryManagement", "Password:"))
        self.firstNameRegisterText.setText(_translate("UniversityLibraryManagement", "FirstName:"))
        self.lastNameRegisterText.setText(_translate("UniversityLibraryManagement", "Last Name:"))
        self.role.setText(_translate("UniversityLibraryManagement", "Role:"))
        self.adminRoleButtom.setText(_translate("UniversityLibraryManagement", "Admin"))
        self.studentRoleButtom.setText(_translate("UniversityLibraryManagement", "Student"))
        self.updateDeleteBookText.setText(_translate("UniversityLibraryManagement", "Update Or Delete Book"))
        item = self.updateDeleteBookTable.horizontalHeaderItem(0)
        item.setText(_translate("UniversityLibraryManagement", "ISBN"))
        item = self.updateDeleteBookTable.horizontalHeaderItem(1)
        item.setText(_translate("UniversityLibraryManagement", "Title"))
        item = self.updateDeleteBookTable.horizontalHeaderItem(2)
        item.setText(_translate("UniversityLibraryManagement", "Author"))
        item = self.updateDeleteBookTable.horizontalHeaderItem(3)
        item.setText(_translate("UniversityLibraryManagement", "Publisher"))
        item = self.updateDeleteBookTable.horizontalHeaderItem(4)
        item.setText(_translate("UniversityLibraryManagement", "Publication Year"))
        item = self.updateDeleteBookTable.horizontalHeaderItem(5)
        item.setText(_translate("UniversityLibraryManagement", "Category"))
        self.enterISBNText.setText(_translate("UniversityLibraryManagement", "Enter The ISBN Of The Book You Want:"))
        self.deleteBookButtom.setText(_translate("UniversityLibraryManagement", "Delete Book"))
        self.updateBookButtom.setText(_translate("UniversityLibraryManagement", "Update Book"))
        self.updateNumCopiesButtom.setText(_translate("UniversityLibraryManagement", "Update"))
        self.newNumCopiesText.setText(_translate("UniversityLibraryManagement", "Enter The New Available Number Of Copy:"))
        self.updateBookInfoText.setText(_translate("UniversityLibraryManagement", "     Update Book Info"))
        self.LoginButtomLoginPage.setText(_translate("UniversityLibraryManagement", "Login"))
        self.passwordLoninText.setText(_translate("UniversityLibraryManagement", "Password:"))
        self.emailLoginText.setText(_translate("UniversityLibraryManagement", "Email:"))
        self.welcomeAgainText.setText(_translate("UniversityLibraryManagement", "    Welcome Again!"))
        self.browsingBookText.setText(_translate("UniversityLibraryManagement", "Browsing Book"))
        item = self.browsingBooksTable.horizontalHeaderItem(0)
        item.setText(_translate("UniversityLibraryManagement", "ISBN"))
        item = self.browsingBooksTable.horizontalHeaderItem(1)
        item.setText(_translate("UniversityLibraryManagement", "Title"))
        item = self.browsingBooksTable.horizontalHeaderItem(2)
        item.setText(_translate("UniversityLibraryManagement", "Author"))
        item = self.browsingBooksTable.horizontalHeaderItem(3)
        item.setText(_translate("UniversityLibraryManagement", "Publisher"))
        item = self.browsingBooksTable.horizontalHeaderItem(4)
        item.setText(_translate("UniversityLibraryManagement", "Publication Year"))
        item = self.browsingBooksTable.horizontalHeaderItem(5)
        item.setText(_translate("UniversityLibraryManagement", "Category"))
        self.searchBrowsingBookText.setText(_translate("UniversityLibraryManagement", "Search For Books:"))
        self.searchButtomBrowsingBook.setText(_translate("UniversityLibraryManagement", "Search"))
        self.searchByISBNRadio.setText(_translate("UniversityLibraryManagement", "Search By ISBN"))
        self.searchByTitleRadio.setText(_translate("UniversityLibraryManagement", "Search By Title"))
        self.searchByAuthorRadio.setText(_translate("UniversityLibraryManagement", "Search By Author"))
        self.searchByPublicationYearRadio.setText(_translate("UniversityLibraryManagement", "Search By PuplicationYear"))
        self.updateInfoText.setText(_translate("UniversityLibraryManagement", "Update Your Info"))
        self.emailTextUpdateInfo.setText(_translate("UniversityLibraryManagement", "Email:"))
        self.passwordTextUpdateInfo.setText(_translate("UniversityLibraryManagement", "Password:"))
        self.firstNameTextUpdateInfo.setText(_translate("UniversityLibraryManagement", "First Name:"))
        self.lastNameTextUpdateInfo.setText(_translate("UniversityLibraryManagement", "Last Name:"))
        self.submitUpdateUserInfo.setText(_translate("UniversityLibraryManagement", "Submit"))
        self.borrowBookHeader.setText(_translate("UniversityLibraryManagement", "Borrow Book |"))
        self.borrowBookPageText.setText(_translate("UniversityLibraryManagement", "Borrow Book Page"))
        self.borrowBookButtom.setText(_translate("UniversityLibraryManagement", "Borrow"))
        self.ISBNBorrowText.setText(_translate("UniversityLibraryManagement", "Enter ISBN Of The Book U Want:"))


import sys
app = QtWidgets.QApplication(sys.argv)
UniversityLibraryManagement = QtWidgets.QMainWindow()
ui = Ui_UniversityLibraryManagement()
ui.setupUi(UniversityLibraryManagement)
UniversityLibraryManagement.setFixedSize(UniversityLibraryManagement.size())
UniversityLibraryManagement.show()
sys.exit(app.exec_())